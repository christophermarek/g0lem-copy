// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())

  // for oauth1.0 such as twitter
  oauth_token        String?
  oauth_token_secret String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  createdAt     DateTime  @default(now())

  image            String?
  accounts         Account[]
  sessions         Session[]
  bots             bot[]
  twitterOAuth     twitterOAuth[]
  oAuths           oAuth[]
  testPost         testPost[]
  savedCompletions savedCompletions[]
  Job              Job[]
  teamIDs          String[]           @db.ObjectId
  teams            Team[]             @relation(fields: [teamIDs], references: [id])
  jobSchedules     JobSchedule[]
  JobScheduleLog   JobScheduleLog[]
  TeamPermission   TeamPermission[]

  openAiApiKey         String?
  completionTokenUsage Int?    @default(0)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model ActionLog {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  callerId          String   @db.ObjectId
  botId             String?  @db.ObjectId
  actionName        String
  actionDisplayName String
  // will be config mapped to array. [key, val, key, val......., key,val]
  actionConfig      String
  success           Boolean
  message           String
  createdAt         DateTime @default(now())
}

model bot {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  disabled       Boolean  @default(false)
  twitterOAuthId String?  @db.ObjectId
  createdAt      DateTime @default(now())

  jobs Job[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  Team        Team?         @relation(fields: [teamId], references: [id])
  teamId      String?       @db.ObjectId
  JobSchedule JobSchedule[]
}

model twitterOAuth {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  twitterUsername        String?
  twitterId              String?
  twitterName            String?
  twitterProfileImageUrl String?
  twitterUrl             String?

  codeVerifier String?
  state        String?
  accessToken  String?
  refreshToken String?
  expiresIn    Int?

  botId String? @db.ObjectId
}

model oAuth {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type         String
  code         String
  state        String
  accessToken  String?
  refreshToken String?
  expiresIn    Int?

  authTypeAccountId       String? @unique
  authTypeAccountUsername String?

  discordWebhookUrl String?

  User   User    @relation(fields: [userId], references: [id])
  userId String  @db.ObjectId
  Team   Team?   @relation(fields: [teamId], references: [id])
  teamId String? @db.ObjectId
}

model testPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model savedCompletions {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  error       String?
  prompt      String
  max_tokens  String
  temperature String
  top_p       String
  n           String
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId

  openAiId      String
  openAiObject  String
  openAiModel   String
  openAiCreated String
  openAiUsage   openAiUsage?
  openAiChoices openAiCompletionChoice[]
}

model openAiUsage {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  prompt_tokens      Int
  completion_tokens  Int
  total_tokens       Int
  savedCompletions   savedCompletions? @relation(fields: [savedCompletionsId], references: [id])
  savedCompletionsId String?           @unique @db.ObjectId
}

model openAiCompletionChoice {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  text               String
  index              String
  logprobs           String?
  finish_reason      String
  savedCompletions   savedCompletions? @relation(fields: [savedCompletionsId], references: [id])
  savedCompletionsId String?           @db.ObjectId
}

model JobStageActionInput {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isManualInput    Boolean
  inputValue       String
  inputActionIndex String
  inputActionName  String

  JobStageAction   JobStageAction? @relation(fields: [jobStageActionId], references: [id])
  jobStageActionId String?         @db.ObjectId
}

model JobStageAction {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  actionIndex String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // input to either be manual or a previous. how to reference it when it is all created at the same time?
  inputs JobStageActionInput[]

  JobStage   JobStage? @relation(fields: [jobStageId], references: [id])
  jobStageId String?   @db.ObjectId
}

model JobStage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Job   Job?    @relation(fields: [jobId], references: [id])
  jobId String? @db.ObjectId

  stageActions JobStageAction[]
}

model Job {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId

  stages JobStage[]
  bot    bot?       @relation(fields: [botId], references: [id])
  botId  String?    @db.ObjectId

  JobFiredLogs JobFiredLog[]
  Team         Team?         @relation(fields: [teamId], references: [id])
  teamId       String?       @db.ObjectId
  jobSchedules JobSchedule[]
}

model JobFiredLog {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  createdAt DateTime @default(now())
  jobDump   String
  status    Boolean

  job            Job?             @relation(fields: [jobId], references: [id])
  jobId          String?          @db.ObjectId
  JobScheduleLog JobScheduleLog[]
}

enum TeamPermissionsTypes {
  ADMIN // has all permissions
  TEAM_OWNER // can edit team permissions
  TEAM_KICK // can kick users from team
  TEAM_PROFILE_EDITOR // can edit team profile
  ADD_BOTS // can add bots to team
  EDIT_BOTS // can edit bots on team
  DELETE_BOTS // can delete bots on team
  ADD_JOBS // can add jobs to team
  EDIT_JOBS // can edit jobs on team
  DELETE_JOBS // can delete jobs on team
  RUN_JOBS // can run jobs on team
  ADD_SCHEDULES // can add schedules to team
  EDIT_SCHEDULES // can edit schedules on team
  DELETE_SCHEDULES // can delete schedules on team
  ENABLE_SCHEDULES // can enable schedules on team
  DISABLE_SCHEDULES // can disable schedules on team
  ADD_CONNECTORS // can add connectors to team
  EDIT_CONNECTORS // can edit connectors on team
  DISCONNECT_CONNECTORS // can delete connectors on team
}

enum TEAM_ITEM_PERMISSIONS {
  READ // can view item
  EDIT // can edit item
  DELETE // can delete item
  VIEW_LOGS // can view logs for item
}

// maps a user to a team with their permissions
model TeamPermission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Team   Team   @relation(fields: [teamId], references: [id])
  teamId String @db.ObjectId

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // user has these permissions on the team
  teamPermissions TeamPermissionsTypes[]
}

model Team {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt

  name         String @unique
  teamPassword String
  teamPicture  String

  bots        bot[]
  jobs        Job[]
  users       User[]        @relation(fields: [userIDs], references: [id])
  userIDs     String[]      @db.ObjectId
  JobSchedule JobSchedule[]
  connectors  oAuth[]

  TeamPermissions   TeamPermission[]
  onJoinPermissions TeamPermissionsTypes[]
}

enum IntervalType {
  MS
  S
}

model JobSchedule {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt

  name String

  bot   bot?    @relation(fields: [botId], references: [id])
  botId String? @db.ObjectId

  job   Job?    @relation(fields: [jobId], references: [id])
  jobId String? @db.ObjectId

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @db.ObjectId

  team   Team?   @relation(fields: [teamId], references: [id])
  teamId String? @db.ObjectId

  intervalType IntervalType
  intervalMs   String

  executeAt String

  enabled Boolean @default(false)

  JobScheduleLog JobScheduleLog[]
}

model JobScheduleLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  dateCreated DateTime @default(now())

  createdBy     User        @relation(fields: [createdById], references: [id])
  createdById   String      @db.ObjectId
  jobSchedule   JobSchedule @relation(fields: [jobScheduleId], references: [id])
  jobScheduleId String      @db.ObjectId
  failed        Boolean

  jobLog        JobFiredLog? @relation(fields: [jobFiredLogId], references: [id])
  jobFiredLogId String?      @db.ObjectId
}
